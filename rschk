#!/usr/bin/env python
#
# rschk -- Checks if files are still downloadable via Rapidshare.
#
# Copyright (C) 2009  Bartosz Oler <bartosz@bzimage.us>
#


"""rschk -- Checks if files are still downloadable via Rapidshare.


"""

__version__ = '0.3'

import optparse, sys, StringIO

import pycurl


URL = "http://api.rapidshare.com/cgi-bin/rsapi.cgi?sub=checkfiles_v1&files=%s&filenames=%s"

# each entry is: (short descr, long descr)
STATUSES = (
    ('File not found', 'File not found'),
    ('OK', 'File OK (Downloading possible without any logging)'),
	('OK', 'File OK (TrafficShare direct download without any logging)'),
	('Server down', 'Server down'),
	('Illegal', 'File marked as illegal'),
	('Locked', 'Anonymous file locked, because it has more than 10 downloads already'),
    ('OK', 'File OK (TrafficShare direct download with enabled logging. Read our privacy policy to see what is logged.)')
)

F_ID = 0
F_NAME = 1
F_SIZE = 2
F_SERVER_ID = 3
F_STATUS = 4
F_SHORT_HOST = 5


def _mirror_url(reply):
    return 'http://rs%s%s.rapidshare.com/files/%s/%s' % (
        reply[F_SERVER_ID], reply[F_SHORT_HOST], reply[F_ID], reply[F_NAME],
    )

def process_response(data):
    unavail = []
    avail = []

    for line in data.split('\n'):
        line = line.strip()
        if not line:
            continue
        parts = line.split(',')
        if int(parts[F_STATUS]) in (1, 2, 6):
            avail.append((parts[F_ID], parts[F_NAME], _mirror_url(parts)))
        else:
            unavail.append((parts[F_ID], parts[F_NAME], int(parts[F_STATUS])))

    if unavail:
        print '=' * 74
        print 'NOT AVAILABLE FILES'
        print '=' * 74
        print '\n'.join('%s/%s\t(reason: %s)' % \
            (id, name, STATUSES[r][0]) for id, name, r in unavail)
        print '=' * 74
        print '%d of %d files are unavailable' % (len(unavail), len(unavail) + len(avail))
        return False
    else:
        print 'Lucky you! All files are available. Enjoy.'
        print 'Below are the direct links to those files.'
        print '\n'.join(url for _, _, url in avail)
        return True


class RapidClient(object):
    def __init__(self, proxy_addr=None):
        self.__proxy_addr = proxy_addr

    def fetch_url(self, url):
        buf = StringIO.StringIO()

        curl = pycurl.Curl()
        curl.setopt(pycurl.URL, url)
        curl.setopt(pycurl.CONNECTTIMEOUT, 30)
        curl.setopt(pycurl.TIMEOUT, 300)
        curl.setopt(pycurl.USERAGENT, 'rschk/' + __version__)
        curl.setopt(pycurl.WRITEFUNCTION, buf.write)
        if self.__proxy_addr:
            curl.setopt(pycurl.PROXYTYPE, pycurl.PROXYTYPE_SOCKS5)
            curl.setopt(pycurl.PROXY, self.__proxy_addr)
        curl.perform()
        curl.close()

        return buf.getvalue()


def main(links_file, proxy_addr):
    files = []
    filenames = []

    fh = open(links_file, 'rb')
    for line in fh:
        line = line.strip()
        if not line or line.startswith('#'):
            continue
        parts = line.split('/')
        files.append(parts[-2])
        filenames.append(parts[-1])
    fh.close()

    # 
    # TODO: Follow quantity limits when constructing this query.
    #       See RS API spec for details.
    #
    url = URL % (','.join(files), ','.join(filenames))

    client = RapidClient(proxy_addr=proxy_addr)
    res = client.fetch_url(url)
    return not process_response(res)


def parse_options(argv):
    usage = "%prog [options] <file>"
    descr = """\
Rapidshare links checker. Checks if all URLs from the given file
are available for download from Rapidshare servers.
"""

    p = optparse.OptionParser(usage,
                              version='%prog ' + __version__,
                              description=descr)
    p.add_option('--proxy-socks5', metavar='ADDRESS', action='store',
                 help='Use SOCKS5 proxy at the given address.')
    p.add_option('--quiet', action='store_true', default=False,
                 help='Relatively quiet. Display only summary.')
    p.add_option('--debug', action='store_true', default=False,
                 help='Debug mode.')

    opts, args = p.parse_args(argv)
    if len(args) != 1:
        p.error('You have to specifiy one (and only one) file with URLs to be checked.')

    if opts.quiet:
        print 'note: Option --quiet is not yet implemented. Sorry.'

    return p, opts, args


if __name__ == '__main__':
    parser, opts, args = parse_options(sys.argv[1:])
    sys.exit(main(args[0], opts.proxy_socks5))


# vim: set ts=4 sw=4 sts=4 et:
